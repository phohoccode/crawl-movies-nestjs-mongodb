/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */

import {
  CategoriesArrayWithAll,
  CountriesArrayWithAll,
  generateMetaData,
} from '@/modules/movies/constants/movie.contant';
import { EpisodeDto } from '@/modules/movies/dto/create-movie.dto';
import {
  Category,
  Country,
  MovieType,
} from '@/modules/movies/types/movie.type';
import slugify from 'slugify';

/**
 *
 * @param pageNumber l√† s·ªë trang hi·ªán t·∫°i
 * @param slugs  l√† m·∫£ng c√°c slug phim tr√™n trang hi·ªán t·∫°i
 * @param results  l√† m·∫£ng k·∫øt qu·∫£ t·ª´ vi·ªác crawl t·ª´ng slug phim
 */

export function logCrawlStats(
  pageNumber: number,
  slugs: string[],
  results: any[],
) {
  const successCount = results.filter(
    (r) => r.status === 'fulfilled' && r.value.status === 'success',
  ).length;
  const alreadyExistCount = results.filter(
    (r) => r.status === 'fulfilled' && r.value.status === 'already_exist',
  ).length;
  const notFoundCount = results.filter(
    (r) => r.status === 'fulfilled' && r.value.status === 'not_found',
  ).length;
  const errorCount = results.filter(
    (r) => r.status === 'fulfilled' && r.value.status === 'error',
  ).length;

  console.log(`\nüìå Trang ${pageNumber} ƒë√£ ho√†n th√†nh`);
  console.table([
    { Lo·∫°i: 'T·ªïng slug', 'S·ªë l∆∞·ª£ng': slugs.length },
    { Lo·∫°i: '‚úÖ Th√†nh c√¥ng', 'S·ªë l∆∞·ª£ng': successCount },
    { Lo·∫°i: '‚ö†Ô∏è ƒê√£ t·ªìn t·∫°i', 'S·ªë l∆∞·ª£ng': alreadyExistCount },
    { Lo·∫°i: '‚ùå Kh√¥ng t√¨m th·∫•y', 'S·ªë l∆∞·ª£ng': notFoundCount },
    { Lo·∫°i: 'üî• L·ªói', 'S·ªë l∆∞·ª£ng': errorCount },
  ]);
}

/**
 *
 * @param startPage l√† trang b·∫Øt ƒë·∫ßu
 * @param totalPages  l√† t·ªïng s·ªë trang
 * @returns  tr·∫£ v·ªÅ m·∫£ng c√°c s·ªë trang t·ª´ startPage ƒë·∫øn totalPages
 */

export function getPages(startPage: number, totalPages: number): number[] {
  return Array.from(
    { length: totalPages - startPage + 1 },
    (_, i) => startPage + i,
  );
}

/**
 *
 * @param ms l√† s·ªë mili gi√¢y c·∫ßn ngh·ªâ
 * @returns  tr·∫£ v·ªÅ m·ªôt Promise sau khi ƒë√£ ngh·ªâ xong
 */

export function sleep(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

/**
 *
 * @param url l√† ƒë∆∞·ªùng d·∫´n API c·∫ßn fetch
 * @param retries  l√† s·ªë l·∫ßn th·ª≠ l·∫°i khi fetch th·∫•t b·∫°i, m·∫∑c ƒë·ªãnh l√† 3
 * @param logProgress  l√† h√†m ƒë·ªÉ ghi log ti·∫øn tr√¨nh
 * @param options  l√† c√°c t√πy ch·ªçn cho fetch, c√≥ th·ªÉ bao g·ªìm method, headers, body, v.v.
 * @returns  tr·∫£ v·ªÅ d·ªØ li·ªáu JSON n·∫øu fetch th√†nh c√¥ng, n·∫øu kh√¥ng s·∫Ω th·ª≠ l·∫°i theo s·ªë l·∫ßn ƒë√£ ƒë·ªãnh
 */
export async function fetchWithRetry(
  url: string,
  retries: number = 3,
  logProgress: (message: string) => void,
  options?: RequestInit & { slug?: string },
) {
  for (let i = 0; i < retries; i++) {
    try {
      const timeSleep = Math.pow(2, i) * 1000;
      const response = await fetch(url, options);

      if (!response.ok) {
        logProgress(
          `‚ùå Fetch ${options?.slug} th·∫•t b·∫°i v·ªõi status ${response.status}. Th·ª≠ l·∫°i l·∫ßn ${i + 1}/${retries}`,
        );
        logProgress(`‚è≥Ngh·ªâ ${timeSleep / 1000}s tr∆∞·ªõc khi th·ª≠ l·∫°i...`);
        await sleep(timeSleep);
        continue;
      }

      const data = await response.json();

      return data;
    } catch (error) {
      logProgress(
        `‚ùåFetch th·∫•t b·∫°i Th·ª≠ l·∫°i l·∫ßn ${i + 1}/${retries} - L·ªói: ${error}`,
      );
      await sleep(1000);
      continue;
    }
  }
}

/**
 *  L·∫•y timestamp hi·ªán t·∫°i theo ƒë·ªãnh d·∫°ng [hh:mm:ss]
 * @returns tr·∫£ v·ªÅ timestamp hi·ªán t·∫°i theo ƒë·ªãnh d·∫°ng [hh:mm:ss]
 */

export function getTimeStamp(): string {
  const now = new Date();
  const hours = now.getHours().toString().padStart(2, '0');
  const minutes = now.getMinutes().toString().padStart(2, '0');
  const seconds = now.getSeconds().toString().padStart(2, '0');

  return `[${hours}:${minutes}:${seconds}]`;
}

/**
 *
 * @param type l√† lo·∫°i phim, qu·ªëc gia ho·∫∑c th·ªÉ lo·∫°i
 * @returns  tr·∫£ v·ªÅ ti√™u ƒë·ªÅ v√† m√¥ t·∫£ t∆∞∆°ng ·ª©ng
 */

export function generateMetaDataFn(type: MovieType | Country | Category) {
  const meta = generateMetaData[type];

  if (!meta) {
    return {
      titleHead: 'PHOFLIX-V3 - Xem phim online mi·ªÖn ph√≠',
      descriptionHead:
        'Xem phim ch·∫•t l∆∞·ª£ng cao, mi·ªÖn ph√≠, c·∫≠p nh·∫≠t nhanh nh·∫•t t·∫°i PHOFLIX-V3.',
    };
  }

  return {
    titleHead: meta.title,
    descriptionHead: meta.description,
  };
}

/**
 * L·∫•y danh s√°ch c√°c poster_url t·ª´ m·∫£ng phim
 * @param movies l√† m·∫£ng c√°c phim
 * @returns   tr·∫£ v·ªÅ m·∫£ng c√°c poster_url
 */

export function generateImageFromMovies(movies: any[]) {
  return movies.map((movie) => {
    return movie.poster_url;
  });
}

/**
 * L·∫•y gi√° tr·ªã t·ª´ k·∫øt qu·∫£ c·ªßa Promise.allSettled
 * @param result l√† k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ Promise.allSettled
 * @returns n·∫øu tr·∫°ng th√°i l√† 'fulfilled' th√¨ tr·∫£ v·ªÅ value, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ null
 */

export function getValueByPromiseAllSettled<T>(
  result: PromiseSettledResult<T>,
) {
  if (result.status === 'fulfilled') {
    return result.value;
  }

  return null;
}

/**
 * Chu·∫©n h√≥a chu·ªói
 * @param str l√† chu·ªói c·∫ßn chu·∫©n h√≥a
 * @returns tr·∫£ v·ªÅ chu·ªói ƒë√£ chu·∫©n h√≥a v√≠ d·ª• "Ph·ªü" => "Pho"
 */
export function normalize(str: string) {
  return str.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
}

export function mapCountriesOrCategories(
  slugs: Country[],
  type: 'country',
): {
  id: string;
  name: string;
  slug: Country;
}[];
export function mapCountriesOrCategories(
  slugs: Category[],
  type: 'category',
): {
  id: string;
  name: string;
  slug: Category;
}[];
export function mapCountriesOrCategories(
  slugs: (Country | Category)[],
  type: 'country' | 'category',
) {
  const arrayToMap =
    type === 'country' ? CountriesArrayWithAll : CategoriesArrayWithAll;

  return slugs.map((slug) => {
    const item = arrayToMap.find((item) => item.slug === slug);
    return item || { id: '', name: 'Unknown', slug };
  });
}

export function generateSlug(name: string) {
  return slugify(name, {
    lower: true, // vi·∫øt th∆∞·ªùng h·∫øt
    strict: true, // b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
    locale: 'vi', // h·ªó tr·ª£ ti·∫øng Vi·ªát
  });
}

export function mapEpisodesToEpisodeDataDto(
  episodes: EpisodeDto[],
  movieName: string,
) {
  return episodes?.map((ep) => {
    const serverData = ep.server_data?.map((server) => {
      return {
        name: server.name,
        link_m3u8: server.link_m3u8,
        slug: generateSlug(server.name || 'unknown'),
        filename: `${movieName} - ${server.name}`,
        link_embed: `https://player.phimapi.com/player/?url=${server.link_m3u8}`,
      };
    });

    return {
      server_name: ep.server_name,
      server_data: serverData || [],
    };
  });
}
