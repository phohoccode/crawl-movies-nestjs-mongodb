/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-return */

import { Injectable, InternalServerErrorException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Movie, MovieDocument } from './schemas/movie.schema';
import { Model } from 'mongoose';
import { ConfigService } from '@nestjs/config';
import { Slug, SlugDocument } from './schemas/slug.schema';
import {
  CrawlStatus,
  CrawlStatusDocument,
  MovieType,
} from './schemas/crawl-status.schema';
import pLimit from 'p-limit';
import { movieType } from './constants/movies.constants';

@Injectable()
export class MoviesService {
  private readonly apiUrl: string | undefined;
  private readonly maxRetries = 3;
  private readonly limit = 64;
  private readonly movieTypes = movieType;

  constructor(
    @InjectModel(Movie.name) private movieModel: Model<MovieDocument>,
    @InjectModel(Slug.name) private slugModel: Model<SlugDocument>,
    @InjectModel(CrawlStatus.name)
    private crawlStatusModel: Model<CrawlStatusDocument>,
    private readonly configService: ConfigService,
  ) {
    this.apiUrl = this.configService.get<string>('API_CRAWL_MOVIES_URL');
  }

  sleep(ms: number) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  movieHasCrawled(movieTypesFromDb: MovieType[]) {
    const arrHasCrawled: MovieType[] = [];
    const arrNotCrawled: MovieType[] = [];

    this.movieTypes.forEach((type) => {
      if (movieTypesFromDb.includes(type)) {
        arrHasCrawled.push(type);
      } else {
        arrNotCrawled.push(type);
      }
    });

    return { arrHasCrawled, arrNotCrawled };
  }

  async initializeCrawlStatus() {
    try {
      const existingStatus = await this.crawlStatusModel.findOne().lean();

      if (existingStatus) {
        console.log(
          '‚ö†Ô∏è Tr·∫°ng th√°i thu th·∫≠p ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn kh·ªüi t·∫°o l·∫°i.',
        );
        return {
          status: '‚ö†Ô∏è Tr·∫°ng th√°i thu th·∫≠p ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn kh·ªüi t·∫°o l·∫°i.',
        };
      }

      const result = await this.crawlStatusModel.create({
        movieTypes: [],
        selectedType: MovieType.PHIM_BO,
        currentPage: 1,
        totalMovies: 0,
        totalPages: 0,
      });

      if (result) {
        console.log('‚úÖ ƒê√£ kh·ªüi t·∫°o tr·∫°ng th√°i thu th·∫≠p phim ban ƒë·∫ßu.');
        return {
          status: '‚úÖ ƒê√£ kh·ªüi t·∫°o tr·∫°ng th√°i thu th·∫≠p phim ban ƒë·∫ßu.',
        };
      } else {
        throw new InternalServerErrorException(
          '‚ùå L·ªói khi kh·ªüi t·∫°o tr·∫°ng th√°i thu th·∫≠p phim.',
        );
      }
    } catch (error) {
      console.log('>>> L·ªói khi kh·ªüi t·∫°o tr·∫°ng th√°i thu th·∫≠p:', error);
      throw new InternalServerErrorException(
        '‚ùå L·ªói khi kh·ªüi t·∫°o tr·∫°ng th√°i thu th·∫≠p phim.',
      );
    }
  }

  async updateMovieTypesInCrawlStatus(newType: MovieType) {
    try {
      const crawlStatus = await this.crawlStatusModel.findOne();

      if (!crawlStatus) {
        console.log('‚ùå Tr·∫°ng th√°i thu th·∫≠p kh√¥ng t·ªìn t·∫°i.');
        return false;
      }

      const index = this.movieTypes.indexOf(newType);

      if (index !== -1 && !crawlStatus.movieTypes.includes(newType)) {
        const result = await this.crawlStatusModel.updateOne(
          { _id: crawlStatus._id },
          {
            movieTypes: [...crawlStatus.movieTypes, newType],
            selectedType: this.movieTypes[index + 1] || this.movieTypes[0],
            currentPage: 1,
            totalPages: 0,
            totalMovies: 0,
          },
        );

        return result.modifiedCount > 0;
      } else {
        console.log(
          '‚ö†Ô∏è Lo·∫°i phim ƒë√£ ƒë∆∞·ª£c thu th·∫≠p ho·∫∑c kh√¥ng h·ª£p l·ªá:',
          newType,
        );
        return false;
      }
    } catch (error) {
      console.log('>>> L·ªói khi c·∫≠p nh·∫≠t lo·∫°i phim ƒë√£ thu th·∫≠p:', error);
      return false;
    }
  }

  async fetchDataMovie(type: MovieType, limit = 64, page = 1, retries = 3) {
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        const resDataMovies = await fetch(
          `${this.apiUrl}/v1/api/danh-sach/${type}?limit=${limit}&page=${page}`,
        );

        if (!resDataMovies.ok) {
          console.log(
            `‚ùå API tr·∫£ v·ªÅ l·ªói ${resDataMovies.status} khi l·∫•y danh s√°ch phim. Th·ª≠ l·∫°i (${attempt}/${retries})...`,
          );
          await this.sleep(1000); // ch·ªù 1s tr∆∞·ªõc khi th·ª≠ l·∫°i
          continue;
        }

        const dataMovies = await resDataMovies.json();
        return dataMovies?.data ?? null; // r√µ r√†ng h∆°n
      } catch (error) {
        console.log(`>>> L·ªói khi l·∫•y d·ªØ li·ªáu phim (l·∫ßn ${attempt}):`, error);
        await this.sleep(1000); // th√™m delay tr∆∞·ªõc khi retry
        continue;
      }
    }

    // Sau khi th·ª≠ ƒë·ªß s·ªë l·∫ßn m√† v·∫´n l·ªói th√¨ tr·∫£ v·ªÅ null
    return null;
  }

  async fetchCrawlStatus() {
    try {
      const crawlStatus = await this.crawlStatusModel.findOne().lean();
      return crawlStatus;
    } catch (error) {
      console.log('>>> L·ªói khi l·∫•y tr·∫°ng th√°i thu th·∫≠p:', error);
      return null;
    }
  }

  async fetchSlugs(limit = 100, page = 1, type: MovieType = MovieType.PHIM_BO) {
    try {
      const res = await this.slugModel
        .find({ type })
        .limit(limit)
        .skip((page - 1) * limit)
        .lean();

      return res.map((item) => item.slug);
    } catch (error) {
      console.log('>>> L·ªói khi l·∫•y slug:', error);
      return [];
    }
  }

  async fetchMovieDetail(slug: string, retries = 3) {
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        const res = await fetch(`${this.apiUrl}/phim/${slug}`);

        if (!res.ok) {
          console.log(
            `‚ùå API tr·∫£ v·ªÅ l·ªói ${res.status} cho slug: ${slug}. Th·ª≠ l·∫°i (${attempt}/${retries})...`,
          );
          await this.sleep(1000);
          continue;
        }

        const text = await res.text();

        try {
          return JSON.parse(text);
        } catch {
          console.log(
            `‚ùå Kh√¥ng parse ƒë∆∞·ª£c JSON cho slug: ${slug} (l·∫ßn ${attempt}/${retries}). Ngh·ªâ 1s...`,
          );
          await this.sleep(1000);
          continue;
        }
      } catch (err: any) {
        console.log(
          `‚ùå L·ªói fetch slug ${slug} (l·∫ßn ${attempt}/${retries}):`,
          err.message,
          'Ngh·ªâ 1s...',
        );
        await this.sleep(1000);
        continue;
      }
    }

    // N·∫øu th·ª≠ ƒë·ªß retries m√† v·∫´n th·∫•t b·∫°i
    return null;
  }

  async saveMovieToDb(data: any) {
    try {
      const movieId = data?.movie?._id;
      delete data?.movie?._id;

      const result = await this.movieModel.updateOne(
        { movie_id: movieId },
        {
          $setOnInsert: {
            movie_id: movieId,
            actors: data?.movie?.actor,
            directors: data?.movie?.director,
            categories: data?.movie?.category,
            countries: data?.movie?.country,
            episodes: data?.episodes || [],
            ...data.movie,
          },
        },
        { upsert: true },
      );

      return result?.upsertedCount > 0;
    } catch (error) {
      console.log('>>> L·ªói khi l∆∞u phim v√†o c∆° s·ªü d·ªØ li·ªáu:', error);
      return null;
    }
  }

  showInfoCrawl(
    currentType: MovieType,
    nextType: MovieType,
    totalPages: number,
  ) {
    console.log('========= TR·∫†NG TH√ÅI C√ÄO PHIM =========');
    console.log('Lo·∫°i phim hi·ªán t·∫°i:', currentType);
    console.log('Lo·∫°i phim ti·∫øp theo:', nextType);
    console.log('T·ªïng s·ªë trang:', totalPages);
    console.log('----------------------------------------\n');
  }

  logCrawlStats(pageNumber: number, slugs: string[], results: any[]) {
    const successCount = results.filter(
      (r) => r.status === 'fulfilled' && r.value.status === 'success',
    ).length;
    const alreadyExistCount = results.filter(
      (r) => r.status === 'fulfilled' && r.value.status === 'already_exist',
    ).length;
    const notFoundCount = results.filter(
      (r) => r.status === 'fulfilled' && r.value.status === 'not_found',
    ).length;
    const errorCount = results.filter(
      (r) => r.status === 'fulfilled' && r.value.status === 'error',
    ).length;

    console.log(`\nüìå Trang ${pageNumber} ho√†n th√†nh`);
    console.table([
      { Lo·∫°i: 'T·ªïng slug', 'S·ªë l∆∞·ª£ng': slugs.length },
      { Lo·∫°i: '‚úÖ Th√†nh c√¥ng', 'S·ªë l∆∞·ª£ng': successCount },
      { Lo·∫°i: '‚ö†Ô∏è ƒê√£ t·ªìn t·∫°i', 'S·ªë l∆∞·ª£ng': alreadyExistCount },
      { Lo·∫°i: '‚ùå Kh√¥ng t√¨m th·∫•y', 'S·ªë l∆∞·ª£ng': notFoundCount },
      { Lo·∫°i: 'üî• L·ªói', 'S·ªë l∆∞·ª£ng': errorCount },
    ]);
  }

  async handleStartCrawlSlugs() {
    try {
      const crawStatus = await this.fetchCrawlStatus();
      const { arrHasCrawled, arrNotCrawled } = this.movieHasCrawled(
        crawStatus?.movieTypes || [],
      );

      if (arrHasCrawled?.length === this.movieTypes?.length) {
        return { status: 'T·∫•t c·∫£ c√°c lo·∫°i phim ƒë√£ ƒë∆∞·ª£c thu th·∫≠p.' };
      }

      for (let i = 0; i < arrNotCrawled.length; i++) {
        const crawStatus = await this.fetchCrawlStatus();
        const type = arrNotCrawled[i];

        // L·∫•y th√¥ng tin ph√¢n trang
        const movieData = await this.fetchDataMovie(
          type || MovieType.PHIM_BO,
          this.limit,
          crawStatus?.currentPage || 1,
        );

        if (!movieData) {
          console.log(
            `‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu phim cho lo·∫°i: ${type}, b·ªè qua...`,
          );
          continue;
        }

        const totalPages: number =
          movieData?.params?.pagination?.totalPages || 0;

        this.showInfoCrawl(
          type,
          arrNotCrawled[i + 1] || arrNotCrawled[0],
          totalPages,
        );

        for (let j = crawStatus?.currentPage || 1; j <= totalPages; j++) {
          const movieData = await this.fetchDataMovie(
            type || MovieType.PHIM_BO,
            this.limit,
            j,
          );

          if (!movieData) {
            console.log(
              `‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu phim cho lo·∫°i: ${type} ·ªü trang ${j}, b·ªè qua...`,
            );
            continue;
          }

          const slugs: string[] =
            movieData?.items?.map((item: any) => item.slug) || [];

          console.log(`===== ƒêang thu th·∫≠p trang ${j} / ${totalPages} =====`);

          const tasks = slugs?.map((slug) => {
            return {
              updateOne: {
                filter: { slug }, // t√¨m theo slug
                update: { $setOnInsert: { slug, type } }, // n·∫øu ch∆∞a c√≥ th√¨ insert
                upsert: true, // b·∫≠t upsert
              },
            };
          });

          if (!tasks || tasks.length === 0) {
            console.log(`‚ö†Ô∏è Trang ${j} kh√¥ng c√≥ slug n√†o ƒë·ªÉ l∆∞u.`);
            continue;
          }

          console.log(
            `üìå Trang ${j} c√≥ ${tasks?.length || 0} slug c·∫ßn l∆∞u v√†o database.`,
          );
          const result = await this.slugModel.bulkWrite(tasks || []);
          // result.upsertedIds ch·ª©a c√°c id c·ªßa document m·ªõi ƒë∆∞·ª£c th√™m
          const newCount = Object.keys(result.upsertedIds || {}).length;
          const existingCount = (tasks?.length || 0) - newCount;

          console.log(`‚úÖ C√≥ ${newCount} slug m·ªõi ƒë∆∞·ª£c th√™m v√†o DB.`);
          console.log(`‚ÑπÔ∏è C√≥ ${existingCount} slug ƒë√£ t·ªìn t·∫°i trong DB.`);

          // C·∫≠p nh·∫≠t tr·∫°ng th√°i crawl
          await this.crawlStatusModel.updateOne(
            { _id: crawStatus?._id },
            {
              $set: {
                currentPage: j + 1,
                totalPages,
                totalMovies: movieData?.params?.pagination?.totalItems || 0,
              },
            },
          );

          console.log('‚è≥ ƒêang ch·ªù 50ms gi√¢y tr∆∞·ªõc khi qua trang ti·∫øp theo...');
          await this.sleep(50);
          console.log('----------------------------------------\n');
        }

        // C·∫≠p nh·∫≠t lo·∫°i phim ƒë√£ thu th·∫≠p xong
        const updated = await this.updateMovieTypesInCrawlStatus(type);

        if (updated) {
          console.log(
            `üéâ ƒê√£ thu th·∫≠p xong t·∫•t c·∫£ slug cho lo·∫°i phim: ${type}\n`,
          );
          console.log('Delay 3s tr∆∞·ªõc khi chuy·ªÉn sang lo·∫°i phim ti·∫øp theo...');
          await this.sleep(3000);
        } else {
          console.log(
            `‚ùå Thu th·∫≠p slug cho lo·∫°i phim ${type} nh∆∞ng kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i.\n`,
          );
          continue;
        }
      }

      return {
        status: 'ƒê√£ thu th·∫≠p xong t·∫•t c·∫£ slug trong danh s√°ch.',
      };
    } catch (error) {
      console.error('‚ùå L·ªói khi crawl slug:', error);
      return { status: 'Thu nh·∫≠p slug th·∫•t b·∫°i!' };
    }
  }

  async handleStartCrawlMovies() {
    try {
      const crawStatus = await this.fetchCrawlStatus();
      const { arrHasCrawled, arrNotCrawled } = this.movieHasCrawled(
        crawStatus?.movieTypes || [],
      );

      if (arrHasCrawled?.length === this.movieTypes?.length) {
        return { status: '‚úÖ T·∫•t c·∫£ c√°c lo·∫°i phim ƒë√£ ƒë∆∞·ª£c thu th·∫≠p.' };
      }

      for (let i = 0; i < arrNotCrawled.length; i++) {
        const crawStatus = await this.fetchCrawlStatus();
        const type = arrNotCrawled[i];

        // L·∫•y th√¥ng tin ph√¢n trang
        const movieData = await this.fetchDataMovie(
          type || MovieType.PHIM_BO,
          this.limit,
          crawStatus?.currentPage || 1,
        );

        if (!movieData) {
          console.log(
            `‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu phim cho lo·∫°i: ${type}, b·ªè qua...`,
          );
          continue;
        }

        const totalPages: number =
          movieData?.params?.pagination?.totalPages || 0;

        this.showInfoCrawl(
          type,
          arrNotCrawled[i + 1] || arrNotCrawled[0],
          totalPages,
        );

        const limit = pLimit(10);

        for (let j = crawStatus?.currentPage || 1; j <= totalPages; j++) {
          console.log(
            `üìÑ ===== ƒêang thu th·∫≠p trang ${j} / ${totalPages} =====`,
          );

          const slugs = await this.fetchSlugs(100, j, type);

          const tasks = slugs.map((slug, i) =>
            limit(async () => {
              try {
                const movieDetail = await this.fetchMovieDetail(slug, 1);

                if (!movieDetail) {
                  return { slug, status: 'not_found' };
                }

                const isNew = await this.saveMovieToDb(movieDetail);

                if (isNew) {
                  console.log(
                    `‚úÖ [${i + 1}/${slugs.length}] L∆∞u phim: ${movieDetail.movie.name}`,
                  );
                } else {
                  console.log(
                    `‚ö†Ô∏è [${i + 1}/${slugs.length}] Phim ƒë√£ t·ªìn t·∫°i: ${movieDetail.movie.name}`,
                  );
                }

                return { slug, status: isNew ? 'success' : 'already_exist' };
              } catch (err) {
                console.error(`  üî• L·ªói x·ª≠ l√Ω slug ${slug}:`, err.message);
                return { slug, status: 'error', error: err };
              }
            }),
          );

          const results = await Promise.allSettled(tasks);
          this.logCrawlStats(j, slugs, results);

          // C·∫≠p nh·∫≠t tr·∫°ng th√°i crawl
          await this.crawlStatusModel.updateOne(
            { _id: crawStatus?._id },
            {
              $set: {
                currentPage: j + 1,
                totalPages,
                totalMovies: movieData?.params?.pagination?.totalItems || 0,
              },
            },
          );

          console.log('‚è≥ Delay 3s ƒë·ªÉ tr√°nh qu√° t·∫£i server...');
          await this.sleep(3000);
        }

        // C·∫≠p nh·∫≠t lo·∫°i phim ƒë√£ thu th·∫≠p xong
        const updated = await this.updateMovieTypesInCrawlStatus(type);

        if (updated) {
          console.log(`üéâ Ho√†n t·∫•t thu th·∫≠p phim cho lo·∫°i: ${type}`);
          console.log(
            '‚è≥ Delay 3s tr∆∞·ªõc khi chuy·ªÉn sang lo·∫°i phim ti·∫øp theo...',
          );
          await this.sleep(3000);
        } else {
          console.log(`‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i cho lo·∫°i phim ${type}`);
          continue;
        }
      }

      return {
        status: '‚úÖ ƒê√£ thu th·∫≠p xong t·∫•t c·∫£ phim trong danh s√°ch slug.',
      };
    } catch (error) {
      console.error('‚ùå L·ªói t·ªïng qu√°t khi crawl phim:', error);
      return { status: 'Thu th·∫≠p th√¥ng tin phim th·∫•t b·∫°i!' };
    }
  }
}
